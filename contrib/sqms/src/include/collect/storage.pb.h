// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_storage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_storage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_storage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_storage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_storage_2eproto;
class EquivlenceClass;
struct EquivlenceClassDefaultTypeInternal;
extern EquivlenceClassDefaultTypeInternal _EquivlenceClass_default_instance_;
class EquivlenceClass_SetsEntry_DoNotUse;
struct EquivlenceClass_SetsEntry_DoNotUseDefaultTypeInternal;
extern EquivlenceClass_SetsEntry_DoNotUseDefaultTypeInternal _EquivlenceClass_SetsEntry_DoNotUse_default_instance_;
class SlowPlanLevelStat;
struct SlowPlanLevelStatDefaultTypeInternal;
extern SlowPlanLevelStatDefaultTypeInternal _SlowPlanLevelStat_default_instance_;
class SlowPlanStat;
struct SlowPlanStatDefaultTypeInternal;
extern SlowPlanStatDefaultTypeInternal _SlowPlanStat_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::EquivlenceClass* Arena::CreateMaybeMessage<::EquivlenceClass>(Arena*);
template<> ::EquivlenceClass_SetsEntry_DoNotUse* Arena::CreateMaybeMessage<::EquivlenceClass_SetsEntry_DoNotUse>(Arena*);
template<> ::SlowPlanLevelStat* Arena::CreateMaybeMessage<::SlowPlanLevelStat>(Arena*);
template<> ::SlowPlanStat* Arena::CreateMaybeMessage<::SlowPlanStat>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class EquivlenceClass_SetsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<EquivlenceClass_SetsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<EquivlenceClass_SetsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  EquivlenceClass_SetsEntry_DoNotUse();
  explicit constexpr EquivlenceClass_SetsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit EquivlenceClass_SetsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const EquivlenceClass_SetsEntry_DoNotUse& other);
  static const EquivlenceClass_SetsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const EquivlenceClass_SetsEntry_DoNotUse*>(&_EquivlenceClass_SetsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "EquivlenceClass.SetsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "EquivlenceClass.SetsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class EquivlenceClass final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EquivlenceClass) */ {
 public:
  inline EquivlenceClass() : EquivlenceClass(nullptr) {}
  ~EquivlenceClass() override;
  explicit constexpr EquivlenceClass(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EquivlenceClass(const EquivlenceClass& from);
  EquivlenceClass(EquivlenceClass&& from) noexcept
    : EquivlenceClass() {
    *this = ::std::move(from);
  }

  inline EquivlenceClass& operator=(const EquivlenceClass& from) {
    CopyFrom(from);
    return *this;
  }
  inline EquivlenceClass& operator=(EquivlenceClass&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EquivlenceClass& default_instance() {
    return *internal_default_instance();
  }
  static inline const EquivlenceClass* internal_default_instance() {
    return reinterpret_cast<const EquivlenceClass*>(
               &_EquivlenceClass_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EquivlenceClass& a, EquivlenceClass& b) {
    a.Swap(&b);
  }
  inline void Swap(EquivlenceClass* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EquivlenceClass* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EquivlenceClass* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EquivlenceClass>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EquivlenceClass& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EquivlenceClass& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EquivlenceClass* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EquivlenceClass";
  }
  protected:
  explicit EquivlenceClass(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSetsFieldNumber = 1,
    kStrLowerLimitFieldNumber = 4,
    kStrUpperLimitFieldNumber = 5,
    kNumLowerLimitFieldNumber = 2,
    kNumUpperLimitFieldNumber = 3,
  };
  // map<string, string> sets = 1;
  int sets_size() const;
  private:
  int _internal_sets_size() const;
  public:
  void clear_sets();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_sets() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_sets();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      sets() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_sets();

  // string str_lower_limit = 4;
  void clear_str_lower_limit();
  const std::string& str_lower_limit() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str_lower_limit(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str_lower_limit();
  PROTOBUF_NODISCARD std::string* release_str_lower_limit();
  void set_allocated_str_lower_limit(std::string* str_lower_limit);
  private:
  const std::string& _internal_str_lower_limit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str_lower_limit(const std::string& value);
  std::string* _internal_mutable_str_lower_limit();
  public:

  // string str_upper_limit = 5;
  void clear_str_upper_limit();
  const std::string& str_upper_limit() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str_upper_limit(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str_upper_limit();
  PROTOBUF_NODISCARD std::string* release_str_upper_limit();
  void set_allocated_str_upper_limit(std::string* str_upper_limit);
  private:
  const std::string& _internal_str_upper_limit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str_upper_limit(const std::string& value);
  std::string* _internal_mutable_str_upper_limit();
  public:

  // double num_lower_limit = 2;
  void clear_num_lower_limit();
  double num_lower_limit() const;
  void set_num_lower_limit(double value);
  private:
  double _internal_num_lower_limit() const;
  void _internal_set_num_lower_limit(double value);
  public:

  // double num_upper_limit = 3;
  void clear_num_upper_limit();
  double num_upper_limit() const;
  void set_num_upper_limit(double value);
  private:
  double _internal_num_upper_limit() const;
  void _internal_set_num_upper_limit(double value);
  public:

  // @@protoc_insertion_point(class_scope:EquivlenceClass)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      EquivlenceClass_SetsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> sets_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_lower_limit_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_upper_limit_;
  double num_lower_limit_;
  double num_upper_limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_2eproto;
};
// -------------------------------------------------------------------

class SlowPlanLevelStat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SlowPlanLevelStat) */ {
 public:
  inline SlowPlanLevelStat() : SlowPlanLevelStat(nullptr) {}
  ~SlowPlanLevelStat() override;
  explicit constexpr SlowPlanLevelStat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SlowPlanLevelStat(const SlowPlanLevelStat& from);
  SlowPlanLevelStat(SlowPlanLevelStat&& from) noexcept
    : SlowPlanLevelStat() {
    *this = ::std::move(from);
  }

  inline SlowPlanLevelStat& operator=(const SlowPlanLevelStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlowPlanLevelStat& operator=(SlowPlanLevelStat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SlowPlanLevelStat& default_instance() {
    return *internal_default_instance();
  }
  static inline const SlowPlanLevelStat* internal_default_instance() {
    return reinterpret_cast<const SlowPlanLevelStat*>(
               &_SlowPlanLevelStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SlowPlanLevelStat& a, SlowPlanLevelStat& b) {
    a.Swap(&b);
  }
  inline void Swap(SlowPlanLevelStat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SlowPlanLevelStat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SlowPlanLevelStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SlowPlanLevelStat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SlowPlanLevelStat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SlowPlanLevelStat& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlowPlanLevelStat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SlowPlanLevelStat";
  }
  protected:
  explicit SlowPlanLevelStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEcListFieldNumber = 1,
    kOutputColSetFieldNumber = 2,
    kGroupBySetFieldNumber = 3,
  };
  // repeated .EquivlenceClass ec_list = 1;
  int ec_list_size() const;
  private:
  int _internal_ec_list_size() const;
  public:
  void clear_ec_list();
  ::EquivlenceClass* mutable_ec_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EquivlenceClass >*
      mutable_ec_list();
  private:
  const ::EquivlenceClass& _internal_ec_list(int index) const;
  ::EquivlenceClass* _internal_add_ec_list();
  public:
  const ::EquivlenceClass& ec_list(int index) const;
  ::EquivlenceClass* add_ec_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EquivlenceClass >&
      ec_list() const;

  // repeated string output_col_set = 2;
  int output_col_set_size() const;
  private:
  int _internal_output_col_set_size() const;
  public:
  void clear_output_col_set();
  const std::string& output_col_set(int index) const;
  std::string* mutable_output_col_set(int index);
  void set_output_col_set(int index, const std::string& value);
  void set_output_col_set(int index, std::string&& value);
  void set_output_col_set(int index, const char* value);
  void set_output_col_set(int index, const char* value, size_t size);
  std::string* add_output_col_set();
  void add_output_col_set(const std::string& value);
  void add_output_col_set(std::string&& value);
  void add_output_col_set(const char* value);
  void add_output_col_set(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output_col_set() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output_col_set();
  private:
  const std::string& _internal_output_col_set(int index) const;
  std::string* _internal_add_output_col_set();
  public:

  // repeated string group_by_set = 3;
  int group_by_set_size() const;
  private:
  int _internal_group_by_set_size() const;
  public:
  void clear_group_by_set();
  const std::string& group_by_set(int index) const;
  std::string* mutable_group_by_set(int index);
  void set_group_by_set(int index, const std::string& value);
  void set_group_by_set(int index, std::string&& value);
  void set_group_by_set(int index, const char* value);
  void set_group_by_set(int index, const char* value, size_t size);
  std::string* add_group_by_set();
  void add_group_by_set(const std::string& value);
  void add_group_by_set(std::string&& value);
  void add_group_by_set(const char* value);
  void add_group_by_set(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& group_by_set() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_group_by_set();
  private:
  const std::string& _internal_group_by_set(int index) const;
  std::string* _internal_add_group_by_set();
  public:

  // @@protoc_insertion_point(class_scope:SlowPlanLevelStat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EquivlenceClass > ec_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_col_set_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> group_by_set_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_2eproto;
};
// -------------------------------------------------------------------

class SlowPlanStat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SlowPlanStat) */ {
 public:
  inline SlowPlanStat() : SlowPlanStat(nullptr) {}
  ~SlowPlanStat() override;
  explicit constexpr SlowPlanStat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SlowPlanStat(const SlowPlanStat& from);
  SlowPlanStat(SlowPlanStat&& from) noexcept
    : SlowPlanStat() {
    *this = ::std::move(from);
  }

  inline SlowPlanStat& operator=(const SlowPlanStat& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlowPlanStat& operator=(SlowPlanStat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SlowPlanStat& default_instance() {
    return *internal_default_instance();
  }
  static inline const SlowPlanStat* internal_default_instance() {
    return reinterpret_cast<const SlowPlanStat*>(
               &_SlowPlanStat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SlowPlanStat& a, SlowPlanStat& b) {
    a.Swap(&b);
  }
  inline void Swap(SlowPlanStat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SlowPlanStat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SlowPlanStat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SlowPlanStat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SlowPlanStat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SlowPlanStat& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlowPlanStat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SlowPlanStat";
  }
  protected:
  explicit SlowPlanStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 1,
  };
  // repeated .SlowPlanLevelStat stats = 1;
  int stats_size() const;
  private:
  int _internal_stats_size() const;
  public:
  void clear_stats();
  ::SlowPlanLevelStat* mutable_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SlowPlanLevelStat >*
      mutable_stats();
  private:
  const ::SlowPlanLevelStat& _internal_stats(int index) const;
  ::SlowPlanLevelStat* _internal_add_stats();
  public:
  const ::SlowPlanLevelStat& stats(int index) const;
  ::SlowPlanLevelStat* add_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SlowPlanLevelStat >&
      stats() const;

  // @@protoc_insertion_point(class_scope:SlowPlanStat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SlowPlanLevelStat > stats_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// EquivlenceClass

// map<string, string> sets = 1;
inline int EquivlenceClass::_internal_sets_size() const {
  return sets_.size();
}
inline int EquivlenceClass::sets_size() const {
  return _internal_sets_size();
}
inline void EquivlenceClass::clear_sets() {
  sets_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
EquivlenceClass::_internal_sets() const {
  return sets_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
EquivlenceClass::sets() const {
  // @@protoc_insertion_point(field_map:EquivlenceClass.sets)
  return _internal_sets();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
EquivlenceClass::_internal_mutable_sets() {
  return sets_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
EquivlenceClass::mutable_sets() {
  // @@protoc_insertion_point(field_mutable_map:EquivlenceClass.sets)
  return _internal_mutable_sets();
}

// double num_lower_limit = 2;
inline void EquivlenceClass::clear_num_lower_limit() {
  num_lower_limit_ = 0;
}
inline double EquivlenceClass::_internal_num_lower_limit() const {
  return num_lower_limit_;
}
inline double EquivlenceClass::num_lower_limit() const {
  // @@protoc_insertion_point(field_get:EquivlenceClass.num_lower_limit)
  return _internal_num_lower_limit();
}
inline void EquivlenceClass::_internal_set_num_lower_limit(double value) {
  
  num_lower_limit_ = value;
}
inline void EquivlenceClass::set_num_lower_limit(double value) {
  _internal_set_num_lower_limit(value);
  // @@protoc_insertion_point(field_set:EquivlenceClass.num_lower_limit)
}

// double num_upper_limit = 3;
inline void EquivlenceClass::clear_num_upper_limit() {
  num_upper_limit_ = 0;
}
inline double EquivlenceClass::_internal_num_upper_limit() const {
  return num_upper_limit_;
}
inline double EquivlenceClass::num_upper_limit() const {
  // @@protoc_insertion_point(field_get:EquivlenceClass.num_upper_limit)
  return _internal_num_upper_limit();
}
inline void EquivlenceClass::_internal_set_num_upper_limit(double value) {
  
  num_upper_limit_ = value;
}
inline void EquivlenceClass::set_num_upper_limit(double value) {
  _internal_set_num_upper_limit(value);
  // @@protoc_insertion_point(field_set:EquivlenceClass.num_upper_limit)
}

// string str_lower_limit = 4;
inline void EquivlenceClass::clear_str_lower_limit() {
  str_lower_limit_.ClearToEmpty();
}
inline const std::string& EquivlenceClass::str_lower_limit() const {
  // @@protoc_insertion_point(field_get:EquivlenceClass.str_lower_limit)
  return _internal_str_lower_limit();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EquivlenceClass::set_str_lower_limit(ArgT0&& arg0, ArgT... args) {
 
 str_lower_limit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:EquivlenceClass.str_lower_limit)
}
inline std::string* EquivlenceClass::mutable_str_lower_limit() {
  std::string* _s = _internal_mutable_str_lower_limit();
  // @@protoc_insertion_point(field_mutable:EquivlenceClass.str_lower_limit)
  return _s;
}
inline const std::string& EquivlenceClass::_internal_str_lower_limit() const {
  return str_lower_limit_.Get();
}
inline void EquivlenceClass::_internal_set_str_lower_limit(const std::string& value) {
  
  str_lower_limit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EquivlenceClass::_internal_mutable_str_lower_limit() {
  
  return str_lower_limit_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EquivlenceClass::release_str_lower_limit() {
  // @@protoc_insertion_point(field_release:EquivlenceClass.str_lower_limit)
  return str_lower_limit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EquivlenceClass::set_allocated_str_lower_limit(std::string* str_lower_limit) {
  if (str_lower_limit != nullptr) {
    
  } else {
    
  }
  str_lower_limit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str_lower_limit,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str_lower_limit_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    str_lower_limit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:EquivlenceClass.str_lower_limit)
}

// string str_upper_limit = 5;
inline void EquivlenceClass::clear_str_upper_limit() {
  str_upper_limit_.ClearToEmpty();
}
inline const std::string& EquivlenceClass::str_upper_limit() const {
  // @@protoc_insertion_point(field_get:EquivlenceClass.str_upper_limit)
  return _internal_str_upper_limit();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EquivlenceClass::set_str_upper_limit(ArgT0&& arg0, ArgT... args) {
 
 str_upper_limit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:EquivlenceClass.str_upper_limit)
}
inline std::string* EquivlenceClass::mutable_str_upper_limit() {
  std::string* _s = _internal_mutable_str_upper_limit();
  // @@protoc_insertion_point(field_mutable:EquivlenceClass.str_upper_limit)
  return _s;
}
inline const std::string& EquivlenceClass::_internal_str_upper_limit() const {
  return str_upper_limit_.Get();
}
inline void EquivlenceClass::_internal_set_str_upper_limit(const std::string& value) {
  
  str_upper_limit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EquivlenceClass::_internal_mutable_str_upper_limit() {
  
  return str_upper_limit_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EquivlenceClass::release_str_upper_limit() {
  // @@protoc_insertion_point(field_release:EquivlenceClass.str_upper_limit)
  return str_upper_limit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EquivlenceClass::set_allocated_str_upper_limit(std::string* str_upper_limit) {
  if (str_upper_limit != nullptr) {
    
  } else {
    
  }
  str_upper_limit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str_upper_limit,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (str_upper_limit_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    str_upper_limit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:EquivlenceClass.str_upper_limit)
}

// -------------------------------------------------------------------

// SlowPlanLevelStat

// repeated .EquivlenceClass ec_list = 1;
inline int SlowPlanLevelStat::_internal_ec_list_size() const {
  return ec_list_.size();
}
inline int SlowPlanLevelStat::ec_list_size() const {
  return _internal_ec_list_size();
}
inline void SlowPlanLevelStat::clear_ec_list() {
  ec_list_.Clear();
}
inline ::EquivlenceClass* SlowPlanLevelStat::mutable_ec_list(int index) {
  // @@protoc_insertion_point(field_mutable:SlowPlanLevelStat.ec_list)
  return ec_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EquivlenceClass >*
SlowPlanLevelStat::mutable_ec_list() {
  // @@protoc_insertion_point(field_mutable_list:SlowPlanLevelStat.ec_list)
  return &ec_list_;
}
inline const ::EquivlenceClass& SlowPlanLevelStat::_internal_ec_list(int index) const {
  return ec_list_.Get(index);
}
inline const ::EquivlenceClass& SlowPlanLevelStat::ec_list(int index) const {
  // @@protoc_insertion_point(field_get:SlowPlanLevelStat.ec_list)
  return _internal_ec_list(index);
}
inline ::EquivlenceClass* SlowPlanLevelStat::_internal_add_ec_list() {
  return ec_list_.Add();
}
inline ::EquivlenceClass* SlowPlanLevelStat::add_ec_list() {
  ::EquivlenceClass* _add = _internal_add_ec_list();
  // @@protoc_insertion_point(field_add:SlowPlanLevelStat.ec_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EquivlenceClass >&
SlowPlanLevelStat::ec_list() const {
  // @@protoc_insertion_point(field_list:SlowPlanLevelStat.ec_list)
  return ec_list_;
}

// repeated string output_col_set = 2;
inline int SlowPlanLevelStat::_internal_output_col_set_size() const {
  return output_col_set_.size();
}
inline int SlowPlanLevelStat::output_col_set_size() const {
  return _internal_output_col_set_size();
}
inline void SlowPlanLevelStat::clear_output_col_set() {
  output_col_set_.Clear();
}
inline std::string* SlowPlanLevelStat::add_output_col_set() {
  std::string* _s = _internal_add_output_col_set();
  // @@protoc_insertion_point(field_add_mutable:SlowPlanLevelStat.output_col_set)
  return _s;
}
inline const std::string& SlowPlanLevelStat::_internal_output_col_set(int index) const {
  return output_col_set_.Get(index);
}
inline const std::string& SlowPlanLevelStat::output_col_set(int index) const {
  // @@protoc_insertion_point(field_get:SlowPlanLevelStat.output_col_set)
  return _internal_output_col_set(index);
}
inline std::string* SlowPlanLevelStat::mutable_output_col_set(int index) {
  // @@protoc_insertion_point(field_mutable:SlowPlanLevelStat.output_col_set)
  return output_col_set_.Mutable(index);
}
inline void SlowPlanLevelStat::set_output_col_set(int index, const std::string& value) {
  output_col_set_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:SlowPlanLevelStat.output_col_set)
}
inline void SlowPlanLevelStat::set_output_col_set(int index, std::string&& value) {
  output_col_set_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:SlowPlanLevelStat.output_col_set)
}
inline void SlowPlanLevelStat::set_output_col_set(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_col_set_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SlowPlanLevelStat.output_col_set)
}
inline void SlowPlanLevelStat::set_output_col_set(int index, const char* value, size_t size) {
  output_col_set_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SlowPlanLevelStat.output_col_set)
}
inline std::string* SlowPlanLevelStat::_internal_add_output_col_set() {
  return output_col_set_.Add();
}
inline void SlowPlanLevelStat::add_output_col_set(const std::string& value) {
  output_col_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SlowPlanLevelStat.output_col_set)
}
inline void SlowPlanLevelStat::add_output_col_set(std::string&& value) {
  output_col_set_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SlowPlanLevelStat.output_col_set)
}
inline void SlowPlanLevelStat::add_output_col_set(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_col_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SlowPlanLevelStat.output_col_set)
}
inline void SlowPlanLevelStat::add_output_col_set(const char* value, size_t size) {
  output_col_set_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SlowPlanLevelStat.output_col_set)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SlowPlanLevelStat::output_col_set() const {
  // @@protoc_insertion_point(field_list:SlowPlanLevelStat.output_col_set)
  return output_col_set_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SlowPlanLevelStat::mutable_output_col_set() {
  // @@protoc_insertion_point(field_mutable_list:SlowPlanLevelStat.output_col_set)
  return &output_col_set_;
}

// repeated string group_by_set = 3;
inline int SlowPlanLevelStat::_internal_group_by_set_size() const {
  return group_by_set_.size();
}
inline int SlowPlanLevelStat::group_by_set_size() const {
  return _internal_group_by_set_size();
}
inline void SlowPlanLevelStat::clear_group_by_set() {
  group_by_set_.Clear();
}
inline std::string* SlowPlanLevelStat::add_group_by_set() {
  std::string* _s = _internal_add_group_by_set();
  // @@protoc_insertion_point(field_add_mutable:SlowPlanLevelStat.group_by_set)
  return _s;
}
inline const std::string& SlowPlanLevelStat::_internal_group_by_set(int index) const {
  return group_by_set_.Get(index);
}
inline const std::string& SlowPlanLevelStat::group_by_set(int index) const {
  // @@protoc_insertion_point(field_get:SlowPlanLevelStat.group_by_set)
  return _internal_group_by_set(index);
}
inline std::string* SlowPlanLevelStat::mutable_group_by_set(int index) {
  // @@protoc_insertion_point(field_mutable:SlowPlanLevelStat.group_by_set)
  return group_by_set_.Mutable(index);
}
inline void SlowPlanLevelStat::set_group_by_set(int index, const std::string& value) {
  group_by_set_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:SlowPlanLevelStat.group_by_set)
}
inline void SlowPlanLevelStat::set_group_by_set(int index, std::string&& value) {
  group_by_set_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:SlowPlanLevelStat.group_by_set)
}
inline void SlowPlanLevelStat::set_group_by_set(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  group_by_set_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SlowPlanLevelStat.group_by_set)
}
inline void SlowPlanLevelStat::set_group_by_set(int index, const char* value, size_t size) {
  group_by_set_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SlowPlanLevelStat.group_by_set)
}
inline std::string* SlowPlanLevelStat::_internal_add_group_by_set() {
  return group_by_set_.Add();
}
inline void SlowPlanLevelStat::add_group_by_set(const std::string& value) {
  group_by_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SlowPlanLevelStat.group_by_set)
}
inline void SlowPlanLevelStat::add_group_by_set(std::string&& value) {
  group_by_set_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SlowPlanLevelStat.group_by_set)
}
inline void SlowPlanLevelStat::add_group_by_set(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  group_by_set_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SlowPlanLevelStat.group_by_set)
}
inline void SlowPlanLevelStat::add_group_by_set(const char* value, size_t size) {
  group_by_set_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SlowPlanLevelStat.group_by_set)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SlowPlanLevelStat::group_by_set() const {
  // @@protoc_insertion_point(field_list:SlowPlanLevelStat.group_by_set)
  return group_by_set_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SlowPlanLevelStat::mutable_group_by_set() {
  // @@protoc_insertion_point(field_mutable_list:SlowPlanLevelStat.group_by_set)
  return &group_by_set_;
}

// -------------------------------------------------------------------

// SlowPlanStat

// repeated .SlowPlanLevelStat stats = 1;
inline int SlowPlanStat::_internal_stats_size() const {
  return stats_.size();
}
inline int SlowPlanStat::stats_size() const {
  return _internal_stats_size();
}
inline void SlowPlanStat::clear_stats() {
  stats_.Clear();
}
inline ::SlowPlanLevelStat* SlowPlanStat::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:SlowPlanStat.stats)
  return stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SlowPlanLevelStat >*
SlowPlanStat::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:SlowPlanStat.stats)
  return &stats_;
}
inline const ::SlowPlanLevelStat& SlowPlanStat::_internal_stats(int index) const {
  return stats_.Get(index);
}
inline const ::SlowPlanLevelStat& SlowPlanStat::stats(int index) const {
  // @@protoc_insertion_point(field_get:SlowPlanStat.stats)
  return _internal_stats(index);
}
inline ::SlowPlanLevelStat* SlowPlanStat::_internal_add_stats() {
  return stats_.Add();
}
inline ::SlowPlanLevelStat* SlowPlanStat::add_stats() {
  ::SlowPlanLevelStat* _add = _internal_add_stats();
  // @@protoc_insertion_point(field_add:SlowPlanStat.stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SlowPlanLevelStat >&
SlowPlanStat::stats() const {
  // @@protoc_insertion_point(field_list:SlowPlanStat.stats)
  return stats_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_storage_2eproto
