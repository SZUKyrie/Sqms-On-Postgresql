// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storage.proto

#include "storage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr EquivlenceClass_SetsEntry_DoNotUse::EquivlenceClass_SetsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct EquivlenceClass_SetsEntry_DoNotUseDefaultTypeInternal {
  constexpr EquivlenceClass_SetsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EquivlenceClass_SetsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    EquivlenceClass_SetsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EquivlenceClass_SetsEntry_DoNotUseDefaultTypeInternal _EquivlenceClass_SetsEntry_DoNotUse_default_instance_;
constexpr EquivlenceClass::EquivlenceClass(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sets_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , str_lower_limit_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , str_upper_limit_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , num_lower_limit_(0)
  , num_upper_limit_(0){}
struct EquivlenceClassDefaultTypeInternal {
  constexpr EquivlenceClassDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EquivlenceClassDefaultTypeInternal() {}
  union {
    EquivlenceClass _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EquivlenceClassDefaultTypeInternal _EquivlenceClass_default_instance_;
constexpr SlowPlanLevelStat::SlowPlanLevelStat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ec_list_()
  , output_col_set_()
  , group_by_set_(){}
struct SlowPlanLevelStatDefaultTypeInternal {
  constexpr SlowPlanLevelStatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SlowPlanLevelStatDefaultTypeInternal() {}
  union {
    SlowPlanLevelStat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SlowPlanLevelStatDefaultTypeInternal _SlowPlanLevelStat_default_instance_;
constexpr SlowPlanStat::SlowPlanStat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stats_(){}
struct SlowPlanStatDefaultTypeInternal {
  constexpr SlowPlanStatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SlowPlanStatDefaultTypeInternal() {}
  union {
    SlowPlanStat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SlowPlanStatDefaultTypeInternal _SlowPlanStat_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_storage_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_storage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_storage_2eproto = nullptr;

const uint32_t TableStruct_storage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::EquivlenceClass_SetsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::EquivlenceClass_SetsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EquivlenceClass_SetsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::EquivlenceClass_SetsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EquivlenceClass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EquivlenceClass, sets_),
  PROTOBUF_FIELD_OFFSET(::EquivlenceClass, num_lower_limit_),
  PROTOBUF_FIELD_OFFSET(::EquivlenceClass, num_upper_limit_),
  PROTOBUF_FIELD_OFFSET(::EquivlenceClass, str_lower_limit_),
  PROTOBUF_FIELD_OFFSET(::EquivlenceClass, str_upper_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SlowPlanLevelStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SlowPlanLevelStat, ec_list_),
  PROTOBUF_FIELD_OFFSET(::SlowPlanLevelStat, output_col_set_),
  PROTOBUF_FIELD_OFFSET(::SlowPlanLevelStat, group_by_set_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SlowPlanStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SlowPlanStat, stats_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::EquivlenceClass_SetsEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::EquivlenceClass)},
  { 21, -1, -1, sizeof(::SlowPlanLevelStat)},
  { 30, -1, -1, sizeof(::SlowPlanStat)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EquivlenceClass_SetsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EquivlenceClass_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SlowPlanLevelStat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SlowPlanStat_default_instance_),
};

const char descriptor_table_protodef_storage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rstorage.proto\"\314\001\n\017EquivlenceClass\022(\n\004s"
  "ets\030\001 \003(\0132\032.EquivlenceClass.SetsEntry\022\027\n"
  "\017num_lower_limit\030\002 \001(\001\022\027\n\017num_upper_limi"
  "t\030\003 \001(\001\022\027\n\017str_lower_limit\030\004 \001(\t\022\027\n\017str_"
  "upper_limit\030\005 \001(\t\032+\n\tSetsEntry\022\013\n\003key\030\001 "
  "\001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"d\n\021SlowPlanLevelS"
  "tat\022!\n\007ec_list\030\001 \003(\0132\020.EquivlenceClass\022\026"
  "\n\016output_col_set\030\002 \003(\t\022\024\n\014group_by_set\030\003"
  " \003(\t\"1\n\014SlowPlanStat\022!\n\005stats\030\001 \003(\0132\022.Sl"
  "owPlanLevelStatb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_storage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_storage_2eproto = {
  false, false, 383, descriptor_table_protodef_storage_2eproto, "storage.proto", 
  &descriptor_table_storage_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_storage_2eproto::offsets,
  file_level_metadata_storage_2eproto, file_level_enum_descriptors_storage_2eproto, file_level_service_descriptors_storage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_storage_2eproto_getter() {
  return &descriptor_table_storage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_storage_2eproto(&descriptor_table_storage_2eproto);

// ===================================================================

EquivlenceClass_SetsEntry_DoNotUse::EquivlenceClass_SetsEntry_DoNotUse() {}
EquivlenceClass_SetsEntry_DoNotUse::EquivlenceClass_SetsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void EquivlenceClass_SetsEntry_DoNotUse::MergeFrom(const EquivlenceClass_SetsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata EquivlenceClass_SetsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_2eproto_getter, &descriptor_table_storage_2eproto_once,
      file_level_metadata_storage_2eproto[0]);
}

// ===================================================================

class EquivlenceClass::_Internal {
 public:
};

EquivlenceClass::EquivlenceClass(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sets_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:EquivlenceClass)
}
EquivlenceClass::EquivlenceClass(const EquivlenceClass& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sets_.MergeFrom(from.sets_);
  str_lower_limit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str_lower_limit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_str_lower_limit().empty()) {
    str_lower_limit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_str_lower_limit(), 
      GetArenaForAllocation());
  }
  str_upper_limit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    str_upper_limit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_str_upper_limit().empty()) {
    str_upper_limit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_str_upper_limit(), 
      GetArenaForAllocation());
  }
  ::memcpy(&num_lower_limit_, &from.num_lower_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_upper_limit_) -
    reinterpret_cast<char*>(&num_lower_limit_)) + sizeof(num_upper_limit_));
  // @@protoc_insertion_point(copy_constructor:EquivlenceClass)
}

inline void EquivlenceClass::SharedCtor() {
str_lower_limit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str_lower_limit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
str_upper_limit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  str_upper_limit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&num_lower_limit_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_upper_limit_) -
    reinterpret_cast<char*>(&num_lower_limit_)) + sizeof(num_upper_limit_));
}

EquivlenceClass::~EquivlenceClass() {
  // @@protoc_insertion_point(destructor:EquivlenceClass)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EquivlenceClass::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  str_lower_limit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  str_upper_limit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EquivlenceClass::ArenaDtor(void* object) {
  EquivlenceClass* _this = reinterpret_cast< EquivlenceClass* >(object);
  (void)_this;
  _this->sets_. ~MapField();
}
inline void EquivlenceClass::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &EquivlenceClass::ArenaDtor);
  }
}
void EquivlenceClass::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EquivlenceClass::Clear() {
// @@protoc_insertion_point(message_clear_start:EquivlenceClass)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sets_.Clear();
  str_lower_limit_.ClearToEmpty();
  str_upper_limit_.ClearToEmpty();
  ::memset(&num_lower_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_upper_limit_) -
      reinterpret_cast<char*>(&num_lower_limit_)) + sizeof(num_upper_limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EquivlenceClass::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, string> sets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&sets_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // double num_lower_limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          num_lower_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double num_upper_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          num_upper_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string str_lower_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_str_lower_limit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "EquivlenceClass.str_lower_limit"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string str_upper_limit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_str_upper_limit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "EquivlenceClass.str_upper_limit"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EquivlenceClass::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EquivlenceClass)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> sets = 1;
  if (!this->_internal_sets().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "EquivlenceClass.SetsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "EquivlenceClass.SetsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_sets().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_sets().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_sets().begin();
          it != this->_internal_sets().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = EquivlenceClass_SetsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_sets().begin();
          it != this->_internal_sets().end(); ++it) {
        target = EquivlenceClass_SetsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // double num_lower_limit = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_num_lower_limit = this->_internal_num_lower_limit();
  uint64_t raw_num_lower_limit;
  memcpy(&raw_num_lower_limit, &tmp_num_lower_limit, sizeof(tmp_num_lower_limit));
  if (raw_num_lower_limit != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_num_lower_limit(), target);
  }

  // double num_upper_limit = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_num_upper_limit = this->_internal_num_upper_limit();
  uint64_t raw_num_upper_limit;
  memcpy(&raw_num_upper_limit, &tmp_num_upper_limit, sizeof(tmp_num_upper_limit));
  if (raw_num_upper_limit != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_num_upper_limit(), target);
  }

  // string str_lower_limit = 4;
  if (!this->_internal_str_lower_limit().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str_lower_limit().data(), static_cast<int>(this->_internal_str_lower_limit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EquivlenceClass.str_lower_limit");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_str_lower_limit(), target);
  }

  // string str_upper_limit = 5;
  if (!this->_internal_str_upper_limit().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str_upper_limit().data(), static_cast<int>(this->_internal_str_upper_limit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EquivlenceClass.str_upper_limit");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_str_upper_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EquivlenceClass)
  return target;
}

size_t EquivlenceClass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EquivlenceClass)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> sets = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sets_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_sets().begin();
      it != this->_internal_sets().end(); ++it) {
    total_size += EquivlenceClass_SetsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string str_lower_limit = 4;
  if (!this->_internal_str_lower_limit().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str_lower_limit());
  }

  // string str_upper_limit = 5;
  if (!this->_internal_str_upper_limit().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str_upper_limit());
  }

  // double num_lower_limit = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_num_lower_limit = this->_internal_num_lower_limit();
  uint64_t raw_num_lower_limit;
  memcpy(&raw_num_lower_limit, &tmp_num_lower_limit, sizeof(tmp_num_lower_limit));
  if (raw_num_lower_limit != 0) {
    total_size += 1 + 8;
  }

  // double num_upper_limit = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_num_upper_limit = this->_internal_num_upper_limit();
  uint64_t raw_num_upper_limit;
  memcpy(&raw_num_upper_limit, &tmp_num_upper_limit, sizeof(tmp_num_upper_limit));
  if (raw_num_upper_limit != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EquivlenceClass::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EquivlenceClass::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EquivlenceClass::GetClassData() const { return &_class_data_; }

void EquivlenceClass::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EquivlenceClass *>(to)->MergeFrom(
      static_cast<const EquivlenceClass &>(from));
}


void EquivlenceClass::MergeFrom(const EquivlenceClass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EquivlenceClass)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  sets_.MergeFrom(from.sets_);
  if (!from._internal_str_lower_limit().empty()) {
    _internal_set_str_lower_limit(from._internal_str_lower_limit());
  }
  if (!from._internal_str_upper_limit().empty()) {
    _internal_set_str_upper_limit(from._internal_str_upper_limit());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_num_lower_limit = from._internal_num_lower_limit();
  uint64_t raw_num_lower_limit;
  memcpy(&raw_num_lower_limit, &tmp_num_lower_limit, sizeof(tmp_num_lower_limit));
  if (raw_num_lower_limit != 0) {
    _internal_set_num_lower_limit(from._internal_num_lower_limit());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_num_upper_limit = from._internal_num_upper_limit();
  uint64_t raw_num_upper_limit;
  memcpy(&raw_num_upper_limit, &tmp_num_upper_limit, sizeof(tmp_num_upper_limit));
  if (raw_num_upper_limit != 0) {
    _internal_set_num_upper_limit(from._internal_num_upper_limit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EquivlenceClass::CopyFrom(const EquivlenceClass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EquivlenceClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquivlenceClass::IsInitialized() const {
  return true;
}

void EquivlenceClass::InternalSwap(EquivlenceClass* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  sets_.InternalSwap(&other->sets_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &str_lower_limit_, lhs_arena,
      &other->str_lower_limit_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &str_upper_limit_, lhs_arena,
      &other->str_upper_limit_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EquivlenceClass, num_upper_limit_)
      + sizeof(EquivlenceClass::num_upper_limit_)
      - PROTOBUF_FIELD_OFFSET(EquivlenceClass, num_lower_limit_)>(
          reinterpret_cast<char*>(&num_lower_limit_),
          reinterpret_cast<char*>(&other->num_lower_limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EquivlenceClass::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_2eproto_getter, &descriptor_table_storage_2eproto_once,
      file_level_metadata_storage_2eproto[1]);
}

// ===================================================================

class SlowPlanLevelStat::_Internal {
 public:
};

SlowPlanLevelStat::SlowPlanLevelStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ec_list_(arena),
  output_col_set_(arena),
  group_by_set_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SlowPlanLevelStat)
}
SlowPlanLevelStat::SlowPlanLevelStat(const SlowPlanLevelStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ec_list_(from.ec_list_),
      output_col_set_(from.output_col_set_),
      group_by_set_(from.group_by_set_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SlowPlanLevelStat)
}

inline void SlowPlanLevelStat::SharedCtor() {
}

SlowPlanLevelStat::~SlowPlanLevelStat() {
  // @@protoc_insertion_point(destructor:SlowPlanLevelStat)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SlowPlanLevelStat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SlowPlanLevelStat::ArenaDtor(void* object) {
  SlowPlanLevelStat* _this = reinterpret_cast< SlowPlanLevelStat* >(object);
  (void)_this;
}
void SlowPlanLevelStat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SlowPlanLevelStat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SlowPlanLevelStat::Clear() {
// @@protoc_insertion_point(message_clear_start:SlowPlanLevelStat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ec_list_.Clear();
  output_col_set_.Clear();
  group_by_set_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlowPlanLevelStat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .EquivlenceClass ec_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ec_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string output_col_set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_output_col_set();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SlowPlanLevelStat.output_col_set"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string group_by_set = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_group_by_set();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SlowPlanLevelStat.group_by_set"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SlowPlanLevelStat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SlowPlanLevelStat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .EquivlenceClass ec_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ec_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ec_list(i), target, stream);
  }

  // repeated string output_col_set = 2;
  for (int i = 0, n = this->_internal_output_col_set_size(); i < n; i++) {
    const auto& s = this->_internal_output_col_set(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SlowPlanLevelStat.output_col_set");
    target = stream->WriteString(2, s, target);
  }

  // repeated string group_by_set = 3;
  for (int i = 0, n = this->_internal_group_by_set_size(); i < n; i++) {
    const auto& s = this->_internal_group_by_set(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SlowPlanLevelStat.group_by_set");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SlowPlanLevelStat)
  return target;
}

size_t SlowPlanLevelStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SlowPlanLevelStat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .EquivlenceClass ec_list = 1;
  total_size += 1UL * this->_internal_ec_list_size();
  for (const auto& msg : this->ec_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string output_col_set = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(output_col_set_.size());
  for (int i = 0, n = output_col_set_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      output_col_set_.Get(i));
  }

  // repeated string group_by_set = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(group_by_set_.size());
  for (int i = 0, n = group_by_set_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      group_by_set_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlowPlanLevelStat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SlowPlanLevelStat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlowPlanLevelStat::GetClassData() const { return &_class_data_; }

void SlowPlanLevelStat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SlowPlanLevelStat *>(to)->MergeFrom(
      static_cast<const SlowPlanLevelStat &>(from));
}


void SlowPlanLevelStat::MergeFrom(const SlowPlanLevelStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SlowPlanLevelStat)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ec_list_.MergeFrom(from.ec_list_);
  output_col_set_.MergeFrom(from.output_col_set_);
  group_by_set_.MergeFrom(from.group_by_set_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlowPlanLevelStat::CopyFrom(const SlowPlanLevelStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SlowPlanLevelStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlowPlanLevelStat::IsInitialized() const {
  return true;
}

void SlowPlanLevelStat::InternalSwap(SlowPlanLevelStat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ec_list_.InternalSwap(&other->ec_list_);
  output_col_set_.InternalSwap(&other->output_col_set_);
  group_by_set_.InternalSwap(&other->group_by_set_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SlowPlanLevelStat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_2eproto_getter, &descriptor_table_storage_2eproto_once,
      file_level_metadata_storage_2eproto[2]);
}

// ===================================================================

class SlowPlanStat::_Internal {
 public:
};

SlowPlanStat::SlowPlanStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  stats_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SlowPlanStat)
}
SlowPlanStat::SlowPlanStat(const SlowPlanStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SlowPlanStat)
}

inline void SlowPlanStat::SharedCtor() {
}

SlowPlanStat::~SlowPlanStat() {
  // @@protoc_insertion_point(destructor:SlowPlanStat)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SlowPlanStat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SlowPlanStat::ArenaDtor(void* object) {
  SlowPlanStat* _this = reinterpret_cast< SlowPlanStat* >(object);
  (void)_this;
}
void SlowPlanStat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SlowPlanStat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SlowPlanStat::Clear() {
// @@protoc_insertion_point(message_clear_start:SlowPlanStat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlowPlanStat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .SlowPlanLevelStat stats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SlowPlanStat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SlowPlanStat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SlowPlanLevelStat stats = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_stats(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SlowPlanStat)
  return target;
}

size_t SlowPlanStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SlowPlanStat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SlowPlanLevelStat stats = 1;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SlowPlanStat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SlowPlanStat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SlowPlanStat::GetClassData() const { return &_class_data_; }

void SlowPlanStat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SlowPlanStat *>(to)->MergeFrom(
      static_cast<const SlowPlanStat &>(from));
}


void SlowPlanStat::MergeFrom(const SlowPlanStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SlowPlanStat)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SlowPlanStat::CopyFrom(const SlowPlanStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SlowPlanStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlowPlanStat::IsInitialized() const {
  return true;
}

void SlowPlanStat::InternalSwap(SlowPlanStat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  stats_.InternalSwap(&other->stats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SlowPlanStat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_storage_2eproto_getter, &descriptor_table_storage_2eproto_once,
      file_level_metadata_storage_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::EquivlenceClass_SetsEntry_DoNotUse* Arena::CreateMaybeMessage< ::EquivlenceClass_SetsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EquivlenceClass_SetsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::EquivlenceClass* Arena::CreateMaybeMessage< ::EquivlenceClass >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EquivlenceClass >(arena);
}
template<> PROTOBUF_NOINLINE ::SlowPlanLevelStat* Arena::CreateMaybeMessage< ::SlowPlanLevelStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SlowPlanLevelStat >(arena);
}
template<> PROTOBUF_NOINLINE ::SlowPlanStat* Arena::CreateMaybeMessage< ::SlowPlanStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SlowPlanStat >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
