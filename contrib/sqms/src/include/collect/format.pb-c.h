/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: src/include/collect/format.proto */

#ifndef PROTOBUF_C_src_2finclude_2fcollect_2fformat_2eproto__INCLUDED
#define PROTOBUF_C_src_2finclude_2fcollect_2fformat_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _HistorySlowPlanStat HistorySlowPlanStat;
typedef struct _GroupSortKey GroupSortKey;
typedef struct _GroupKeys GroupKeys;
typedef struct _Equals Equals;
typedef struct _EquivlenceClass EquivlenceClass;
typedef struct _EquivlenceClass__SetsEntry EquivlenceClass__SetsEntry;
typedef struct _SlowPlanLevelStat SlowPlanLevelStat;
typedef struct _SlowPlanStat SlowPlanStat;


/* --- enums --- */


/* --- messages --- */

struct  _HistorySlowPlanStat
{
  ProtobufCMessage base;
  double custom_plan_provider;
  double estimate_plan_width;
  double actual_nloops;
  double actual_start_up;
  double actual_total;
  double actual_rows;
  size_t n_childs;
  HistorySlowPlanStat **childs;
  char *node_type;
  char *strategy;
  /*
   *for aggregate
   */
  char *partial_mode;
  /*
   *for subplan
   */
  char *sub_plan_name;
  /*
   *for insert/update/delete
   */
  char *operation;
  /*
   *for scan (object tag and object name is a kv)
   */
  char *object_name;
  char *schema;
  char *object_tag;
  char *alia_name;
  /*
   *addtional info for indexscan/indexonlyscan
   */
  char *scan_dir;
  char *idx_name;
  /*
   *for join
   */
  char *join_type;
  protobuf_c_boolean inner_unique;
  /*
   *for setOp
   */
  char *command;
  /*
   *output cols
   */
  size_t n_output;
  char **output;
  char *relationship;
  double total_cost;
  char *sample_method;
  char *sampling_parameters;
  char *repeatable_seed;
  /*
   *total cost of current subquery
   */
  double sub_cost;
  /*
   *json of current subquery
   */
  char *json_plan;
  char *canonical_json_plan;
  /*
   *all node type of current subquery
   */
  size_t n_sub_node_type_set;
  char **sub_node_type_set;
  /*
   *for filter
   */
  char *qlabel;
  char *exprstr;
  /*
   *for groupby
   */
  char *key_name;
  char *keysetname;
  protobuf_c_boolean is_g_keys;
  /*
   *for groupby set, a set contains serval keys
   */
  size_t n_g_sets;
  GroupKeys **g_sets;
  /*
   *for groupby or sort keys
   */
  char *group_sort_qlabel;
  size_t n_group_sort_keys;
  GroupSortKey **group_sort_keys;
  /*
   *all prdicates of current subquery
   */
  size_t n_and_quals;
  Equals **and_quals;
  size_t n_or_quals;
  Equals **or_quals;
};
#define HISTORY_SLOW_PLAN_STAT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&history_slow_plan_stat__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0,NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, 0,NULL, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0,NULL, (char *)protobuf_c_empty_string, 0,NULL, 0,NULL, 0,NULL }


struct  _GroupSortKey
{
  ProtobufCMessage base;
  /*
   * sort or groupby key
   * group_sort_qlabel == "Group Key" --> groupby key
   * group_sort_qlable == "Sort Key"  --> sort key
   */
  char *key;
  /*
   *sort order options
   */
  protobuf_c_boolean sort_operators;
  char *sort_collation;
  /*
   * DESC or ASC or NO_DEFAULT
   */
  char *sort_direction;
  /*
   * NULLS FIRST or NULLS LAST
   */
  char *sort_null_pos;
  protobuf_c_boolean presorted_key;
};
#define GROUP_SORT_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&group_sort_key__descriptor) \
    , (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0 }


struct  _GroupKeys
{
  ProtobufCMessage base;
  char *key_name;
  size_t n_keys;
  char **keys;
};
#define GROUP_KEYS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&group_keys__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL }


struct  _Equals
{
  ProtobufCMessage base;
  char *left;
  char *right;
  char *op;
};
#define EQUALS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&equals__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _EquivlenceClass__SetsEntry
{
  ProtobufCMessage base;
  char *key;
  char *value;
};
#define EQUIVLENCE_CLASS__SETS_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&equivlence_class__sets_entry__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _EquivlenceClass
{
  ProtobufCMessage base;
  size_t n_sets;
  EquivlenceClass__SetsEntry **sets;
  double num_lower_limit;
  double num_upper_limit;
  char *str_lower_limit;
  char *str_upper_limit;
};
#define EQUIVLENCE_CLASS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&equivlence_class__descriptor) \
    , 0,NULL, 0, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 *plan stat in single level
 */
struct  _SlowPlanLevelStat
{
  ProtobufCMessage base;
  /*
   *join,filter
   */
  size_t n_ec_list;
  EquivlenceClass **ec_list;
  size_t n_output_col_set;
  char **output_col_set;
  /*
   *Agg
   */
  /*
   *Limit
   */
  size_t n_group_by_set;
  char **group_by_set;
};
#define SLOW_PLAN_LEVEL_STAT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&slow_plan_level_stat__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL }


struct  _SlowPlanStat
{
  ProtobufCMessage base;
  /*
   *size of stats is qual with slow plan's level num
   */
  size_t n_stats;
  SlowPlanLevelStat **stats;
};
#define SLOW_PLAN_STAT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&slow_plan_stat__descriptor) \
    , 0,NULL }


/* HistorySlowPlanStat methods */
void   history_slow_plan_stat__init
                     (HistorySlowPlanStat         *message);
size_t history_slow_plan_stat__get_packed_size
                     (const HistorySlowPlanStat   *message);
size_t history_slow_plan_stat__pack
                     (const HistorySlowPlanStat   *message,
                      uint8_t             *out);
size_t history_slow_plan_stat__pack_to_buffer
                     (const HistorySlowPlanStat   *message,
                      ProtobufCBuffer     *buffer);
HistorySlowPlanStat *
       history_slow_plan_stat__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   history_slow_plan_stat__free_unpacked
                     (HistorySlowPlanStat *message,
                      ProtobufCAllocator *allocator);
/* GroupSortKey methods */
void   group_sort_key__init
                     (GroupSortKey         *message);
size_t group_sort_key__get_packed_size
                     (const GroupSortKey   *message);
size_t group_sort_key__pack
                     (const GroupSortKey   *message,
                      uint8_t             *out);
size_t group_sort_key__pack_to_buffer
                     (const GroupSortKey   *message,
                      ProtobufCBuffer     *buffer);
GroupSortKey *
       group_sort_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   group_sort_key__free_unpacked
                     (GroupSortKey *message,
                      ProtobufCAllocator *allocator);
/* GroupKeys methods */
void   group_keys__init
                     (GroupKeys         *message);
size_t group_keys__get_packed_size
                     (const GroupKeys   *message);
size_t group_keys__pack
                     (const GroupKeys   *message,
                      uint8_t             *out);
size_t group_keys__pack_to_buffer
                     (const GroupKeys   *message,
                      ProtobufCBuffer     *buffer);
GroupKeys *
       group_keys__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   group_keys__free_unpacked
                     (GroupKeys *message,
                      ProtobufCAllocator *allocator);
/* Equals methods */
void   equals__init
                     (Equals         *message);
size_t equals__get_packed_size
                     (const Equals   *message);
size_t equals__pack
                     (const Equals   *message,
                      uint8_t             *out);
size_t equals__pack_to_buffer
                     (const Equals   *message,
                      ProtobufCBuffer     *buffer);
Equals *
       equals__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   equals__free_unpacked
                     (Equals *message,
                      ProtobufCAllocator *allocator);
/* EquivlenceClass__SetsEntry methods */
void   equivlence_class__sets_entry__init
                     (EquivlenceClass__SetsEntry         *message);
/* EquivlenceClass methods */
void   equivlence_class__init
                     (EquivlenceClass         *message);
size_t equivlence_class__get_packed_size
                     (const EquivlenceClass   *message);
size_t equivlence_class__pack
                     (const EquivlenceClass   *message,
                      uint8_t             *out);
size_t equivlence_class__pack_to_buffer
                     (const EquivlenceClass   *message,
                      ProtobufCBuffer     *buffer);
EquivlenceClass *
       equivlence_class__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   equivlence_class__free_unpacked
                     (EquivlenceClass *message,
                      ProtobufCAllocator *allocator);
/* SlowPlanLevelStat methods */
void   slow_plan_level_stat__init
                     (SlowPlanLevelStat         *message);
size_t slow_plan_level_stat__get_packed_size
                     (const SlowPlanLevelStat   *message);
size_t slow_plan_level_stat__pack
                     (const SlowPlanLevelStat   *message,
                      uint8_t             *out);
size_t slow_plan_level_stat__pack_to_buffer
                     (const SlowPlanLevelStat   *message,
                      ProtobufCBuffer     *buffer);
SlowPlanLevelStat *
       slow_plan_level_stat__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   slow_plan_level_stat__free_unpacked
                     (SlowPlanLevelStat *message,
                      ProtobufCAllocator *allocator);
/* SlowPlanStat methods */
void   slow_plan_stat__init
                     (SlowPlanStat         *message);
size_t slow_plan_stat__get_packed_size
                     (const SlowPlanStat   *message);
size_t slow_plan_stat__pack
                     (const SlowPlanStat   *message,
                      uint8_t             *out);
size_t slow_plan_stat__pack_to_buffer
                     (const SlowPlanStat   *message,
                      ProtobufCBuffer     *buffer);
SlowPlanStat *
       slow_plan_stat__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   slow_plan_stat__free_unpacked
                     (SlowPlanStat *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*HistorySlowPlanStat_Closure)
                 (const HistorySlowPlanStat *message,
                  void *closure_data);
typedef void (*GroupSortKey_Closure)
                 (const GroupSortKey *message,
                  void *closure_data);
typedef void (*GroupKeys_Closure)
                 (const GroupKeys *message,
                  void *closure_data);
typedef void (*Equals_Closure)
                 (const Equals *message,
                  void *closure_data);
typedef void (*EquivlenceClass__SetsEntry_Closure)
                 (const EquivlenceClass__SetsEntry *message,
                  void *closure_data);
typedef void (*EquivlenceClass_Closure)
                 (const EquivlenceClass *message,
                  void *closure_data);
typedef void (*SlowPlanLevelStat_Closure)
                 (const SlowPlanLevelStat *message,
                  void *closure_data);
typedef void (*SlowPlanStat_Closure)
                 (const SlowPlanStat *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor history_slow_plan_stat__descriptor;
extern const ProtobufCMessageDescriptor group_sort_key__descriptor;
extern const ProtobufCMessageDescriptor group_keys__descriptor;
extern const ProtobufCMessageDescriptor equals__descriptor;
extern const ProtobufCMessageDescriptor equivlence_class__descriptor;
extern const ProtobufCMessageDescriptor equivlence_class__sets_entry__descriptor;
extern const ProtobufCMessageDescriptor slow_plan_level_stat__descriptor;
extern const ProtobufCMessageDescriptor slow_plan_stat__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_src_2finclude_2fcollect_2fformat_2eproto__INCLUDED */
